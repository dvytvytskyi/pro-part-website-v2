<?php
/**
 * –ü–∞—Ä—Å–µ—Ä –ø–æ–ª—ñ–≥–æ–Ω—ñ–≤ —Ä–∞–π–æ–Ω—ñ–≤ –∑ Zoddak Properties
 * –õ–æ–≥—ñ–Ω—É—î—Ç—å—Å—è —Ç–∞ –æ—Ç—Ä–∏–º—É—î GeoJSON –ø–æ–ª—ñ–≥–æ–Ω–∏ –∑ —ó—Ö–Ω—å–æ—ó –∫–∞—Ä—Ç–∏
 */

class ZoddakPolygonFetcher {
    private $loginUrl = 'https://app.zoddak.com/api/auth/login';
    private $propertiesUrl = 'https://app.zoddak.com/api/properties';
    private $cookieFile;
    private $session;
    private $outputDir;
    
    public function __construct($outputDir) {
        $this->outputDir = $outputDir;
        if (!is_dir($outputDir)) {
            mkdir($outputDir, 0755, true);
        }
        $this->cookieFile = sys_get_temp_dir() . '/zoddak_cookies.txt';
    }
    
    /**
     * –õ–æ–≥—ñ–Ω –≤ —Å–∏—Å—Ç–µ–º—É Zoddak
     */
    public function login($email, $password) {
        echo "üîê –õ–æ–≥—ñ–Ω—é—Å—å –≤ Zoddak...\n";
        
        $ch = curl_init($this->loginUrl);
        curl_setopt_array($ch, [
            CURLOPT_POST => true,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_COOKIEJAR => $this->cookieFile,
            CURLOPT_COOKIEFILE => $this->cookieFile,
            CURLOPT_HTTPHEADER => [
                'Content-Type: application/json',
                'Accept: application/json',
            ],
            CURLOPT_POSTFIELDS => json_encode([
                'email' => $email,
                'password' => $password
            ]),
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_USERAGENT => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        ]);
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        if ($httpCode === 200 || $httpCode === 201) {
            $data = json_decode($response, true);
            if (isset($data['token']) || isset($data['access_token'])) {
                echo "‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –ª–æ–≥—ñ–Ω\n";
                return true;
            }
        }
        
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É. HTTP Code: $httpCode\n";
        echo "Response: $response\n";
        return false;
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Ç–∞ —Ä–∞–π–æ–Ω–∏
     */
    public function fetchProperties($filters = []) {
        echo "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ...\n";
        
        $url = $this->propertiesUrl;
        if (!empty($filters)) {
            $url .= '?' . http_build_query($filters);
        }
        
        $ch = curl_init($url);
        curl_setopt_array($ch, [
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_COOKIEFILE => $this->cookieFile,
            CURLOPT_COOKIEJAR => $this->cookieFile,
            CURLOPT_HTTPHEADER => [
                'Accept: application/json',
                'Content-Type: application/json',
            ],
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_USERAGENT => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        ]);
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        if ($httpCode === 200) {
            $data = json_decode($response, true);
            echo "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ: " . count($data['properties'] ?? []) . " –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π\n";
            return $data;
        }
        
        echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö. HTTP Code: $httpCode\n";
        echo "Response: $response\n";
        return null;
    }
    
    /**
     * –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–∞–π—Ç–∏ API endpoint –¥–ª—è –∫–∞—Ä—Ç/–ø–æ–ª—ñ–≥–æ–Ω—ñ–≤
     */
    public function fetchMapData() {
        echo "üó∫Ô∏è –ü–æ—à—É–∫ –¥–∞–Ω–∏—Ö –∫–∞—Ä—Ç–∏...\n";
        
        // –ú–æ–∂–ª–∏–≤—ñ endpoints –¥–ª—è –∫–∞—Ä—Ç
        $endpoints = [
            'https://app.zoddak.com/api/map/polygons',
            'https://app.zoddak.com/api/zones',
            'https://app.zoddak.com/api/areas',
            'https://app.zoddak.com/api/locations',
            'https://app.zoddak.com/api/properties/map',
            'https://app.zoddak.com/api/geojson',
        ];
        
        foreach ($endpoints as $endpoint) {
            echo "   –°–ø—Ä–æ–±—É—é: $endpoint\n";
            $ch = curl_init($endpoint);
            curl_setopt_array($ch, [
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_COOKIEFILE => $this->cookieFile,
                CURLOPT_COOKIEJAR => $this->cookieFile,
                CURLOPT_HTTPHEADER => [
                    'Accept: application/json',
                ],
                CURLOPT_SSL_VERIFYPEER => false,
                CURLOPT_USERAGENT => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            ]);
            
            $response = curl_exec($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);
            
            if ($httpCode === 200) {
                $data = json_decode($response, true);
                if ($data && (isset($data['features']) || isset($data['polygons']) || isset($data['zones']))) {
                    echo "   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω—ñ –Ω–∞: $endpoint\n";
                    return $data;
                }
            }
        }
        
        return null;
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ Zoddak –≤ GeoJSON —Ñ–æ—Ä–º–∞—Ç
     */
    public function convertToGeoJSON($zoddakData) {
        $features = [];
        
        // –†—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        if (isset($zoddakData['features'])) {
            // –í–∂–µ GeoJSON —Ñ–æ—Ä–º–∞—Ç
            return [
                'type' => 'FeatureCollection',
                'features' => $zoddakData['features']
            ];
        }
        
        if (isset($zoddakData['polygons'])) {
            foreach ($zoddakData['polygons'] as $polygon) {
                $features[] = $this->createFeature($polygon);
            }
        }
        
        if (isset($zoddakData['zones'])) {
            foreach ($zoddakData['zones'] as $zone) {
                $features[] = $this->createFeatureFromZone($zone);
            }
        }
        
        if (isset($zoddakData['properties'])) {
            // –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ —Ä–∞–π–æ–Ω–∞—Ö
            $grouped = [];
            foreach ($zoddakData['properties'] as $prop) {
                $area = $prop['area'] ?? $prop['zone'] ?? $prop['location'] ?? 'unknown';
                if (!isset($grouped[$area])) {
                    $grouped[$area] = [];
                }
                $grouped[$area][] = $prop;
            }
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–ª—ñ–≥–æ–Ω–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–π–æ–Ω—É
            foreach ($grouped as $areaName => $properties) {
                $polygon = $this->createPolygonFromProperties($properties, $areaName);
                if ($polygon) {
                    $features[] = $polygon;
                }
            }
        }
        
        return [
            'type' => 'FeatureCollection',
            'features' => $features
        ];
    }
    
    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ Feature –∑ –ø–æ–ª—ñ–≥–æ–Ω—É
     */
    private function createFeature($polygon) {
        return [
            'type' => 'Feature',
            'properties' => [
                'name' => $polygon['name'] ?? $polygon['title'] ?? 'Unknown',
                'type' => $polygon['type'] ?? 'district',
                'level' => $polygon['level'] ?? 3,
                'parent' => $polygon['parent'] ?? null,
            ],
            'geometry' => [
                'type' => 'Polygon',
                'coordinates' => $this->normalizeCoordinates($polygon['coordinates'] ?? $polygon['path'] ?? [])
            ]
        ];
    }
    
    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ Feature –∑ zone
     */
    private function createFeatureFromZone($zone) {
        return [
            'type' => 'Feature',
            'id' => $zone['id'] ?? null,
            'properties' => [
                'name' => $zone['name'] ?? $zone['title'] ?? 'Unknown',
                'type' => 'district',
                'level' => 3,
                'parent' => $zone['city'] ?? $zone['parent'] ?? null,
            ],
            'geometry' => [
                'type' => 'Polygon',
                'coordinates' => $this->normalizeCoordinates($zone['coordinates'] ?? $zone['polygon'] ?? $zone['bounds'] ?? [])
            ]
        ];
    }
    
    /**
     * –ù–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (–∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ [lat, lon] –≤ [lon, lat] —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
     */
    private function normalizeCoordinates($coords) {
        if (empty($coords)) return [[]];
        
        // –Ø–∫—â–æ —Ü–µ –≤–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        if (isset($coords[0][0]) && is_array($coords[0][0])) {
            $normalized = [];
            foreach ($coords as $ring) {
                $normalizedRing = [];
                foreach ($ring as $point) {
                    // –Ø–∫—â–æ lat > 90, –∑–Ω–∞—á–∏—Ç—å —Ü–µ lon, lat - –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î
                    // –Ø–∫—â–æ lat < 90, –º–æ–∂–ª–∏–≤–æ —Ü–µ lat, lon - –ø–µ—Ä–µ–≤–µ—Ä—Ç–∞—î–º–æ
                    if (abs($point[0]) > 90 || abs($point[1]) < 90) {
                        $normalizedRing[] = [$point[1], $point[0]]; // –ü–µ—Ä–µ–≤–µ—Ä—Ç–∞—î–º–æ
                    } else {
                        $normalizedRing[] = $point; // –ó–∞–ª–∏—à–∞—î–º–æ —è–∫ —î
                    }
                }
                // –ó–∞–º–∏–∫–∞—î–º–æ –ø–æ–ª—ñ–≥–æ–Ω
                if ($normalizedRing[0] !== $normalizedRing[count($normalizedRing) - 1]) {
                    $normalizedRing[] = $normalizedRing[0];
                }
                $normalized[] = $normalizedRing;
            }
            return count($normalized) === 1 ? $normalized[0] : $normalized;
        }
        
        return [[]];
    }
    
    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–ª—ñ–≥–æ–Ω –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π (convex hull –∞–±–æ bounding box)
     */
    private function createPolygonFromProperties($properties, $areaName) {
        if (empty($properties)) return null;
        
        $lats = [];
        $lons = [];
        
        foreach ($properties as $prop) {
            if (isset($prop['latitude']) && isset($prop['longitude'])) {
                $lats[] = floatval($prop['latitude']);
                $lons[] = floatval($prop['longitude']);
            } elseif (isset($prop['lat']) && isset($prop['lng'])) {
                $lats[] = floatval($prop['lat']);
                $lons[] = floatval($prop['lng']);
            } elseif (isset($prop['coordinates'])) {
                $coords = $prop['coordinates'];
                $lats[] = floatval($coords[1] ?? $coords[0]);
                $lons[] = floatval($coords[0] ?? $coords[1]);
            }
        }
        
        if (empty($lats)) return null;
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ bounding box –∑ padding
        $minLat = min($lats);
        $maxLat = max($lats);
        $minLon = min($lons);
        $maxLon = max($lons);
        
        // –î–æ–¥–∞—î–º–æ padding (5%)
        $latPadding = ($maxLat - $minLat) * 0.05;
        $lonPadding = ($maxLon - $minLon) * 0.05;
        
        return [
            'type' => 'Feature',
            'properties' => [
                'name' => $areaName,
                'type' => 'district',
                'level' => 3,
            ],
            'geometry' => [
                'type' => 'Polygon',
                'coordinates' => [[
                    [$minLon - $lonPadding, $minLat - $latPadding],
                    [$maxLon + $lonPadding, $minLat - $latPadding],
                    [$maxLon + $lonPadding, $maxLat + $latPadding],
                    [$minLon - $lonPadding, $maxLat + $latPadding],
                    [$minLon - $lonPadding, $minLat - $latPadding], // –ó–∞–º–∏–∫–∞—î–º–æ
                ]]
            ]
        ];
    }
    
    /**
     * –ó–±–µ—Ä–µ–≥—Ç–∏ GeoJSON —É —Ñ–∞–π–ª
     */
    public function saveGeoJSON($filename, $geojson) {
        $filepath = $this->outputDir . '/' . $filename;
        file_put_contents($filepath, json_encode($geojson, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        echo "üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: $filepath\n";
    }
    
    /**
     * –î–æ—Å–ª—ñ–¥–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É API (–∑–Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ endpoints)
     */
    public function exploreAPI() {
        echo "üîç –î–æ—Å–ª—ñ–¥–∂—É—é API —Å—Ç—Ä—É–∫—Ç—É—Ä—É...\n";
        
        // –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ endpoints
        $testEndpoints = [
            '/api/properties',
            '/api/map',
            '/api/locations',
            '/api/zones',
            '/api/areas',
            '/api/districts',
        ];
        
        foreach ($testEndpoints as $endpoint) {
            $url = 'https://app.zoddak.com' . $endpoint;
            echo "\nüì° –¢–µ—Å—Ç—É—é: $url\n";
            
            $ch = curl_init($url);
            curl_setopt_array($ch, [
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_COOKIEFILE => $this->cookieFile,
                CURLOPT_COOKIEJAR => $this->cookieFile,
                CURLOPT_HTTPHEADER => [
                    'Accept: application/json',
                ],
                CURLOPT_SSL_VERIFYPEER => false,
                CURLOPT_USERAGENT => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            ]);
            
            $response = curl_exec($ch);
            $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            $contentType = curl_getinfo($ch, CURLINFO_CONTENT_TYPE);
            curl_close($ch);
            
            echo "   HTTP Code: $httpCode\n";
            echo "   Content-Type: $contentType\n";
            
            if ($httpCode === 200 && strpos($contentType, 'json') !== false) {
                $data = json_decode($response, true);
                echo "   ‚úÖ –í–∞–ª—ñ–¥–Ω–∏–π JSON\n";
                echo "   –°—Ç—Ä—É–∫—Ç—É—Ä–∞: " . json_encode(array_keys($data ?? [])) . "\n";
                if (strlen($response) < 1000) {
                    echo "   –î–∞–Ω—ñ: " . substr($response, 0, 500) . "\n";
                }
            }
        }
    }
}

// ========== –ì–û–õ–û–í–ù–ê –õ–û–ì–Ü–ö–ê ==========

echo "üöÄ –ü–∞—Ä—Å–µ—Ä –ø–æ–ª—ñ–≥–æ–Ω—ñ–≤ –∑ Zoddak Properties\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

$email = 'info@property-partners.es';
$password = 'dybmyG-kefwyv-cygko5';
$outputDir = __DIR__ . '/../data/geojson';

$fetcher = new ZoddakPolygonFetcher($outputDir);

// –õ–æ–≥—ñ–Ω
if (!$fetcher->login($email, $password)) {
    echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–π—Ç–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ credentials.\n";
    exit(1);
}

// –°–ø–æ—á–∞—Ç–∫—É –¥–æ—Å–ª—ñ–¥–∏–º–æ API
echo "\n";
$fetcher->exploreAPI();

// –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–∞—Ä—Ç–∏
$mapData = $fetcher->fetchMapData();
if ($mapData) {
    $geojson = $fetcher->convertToGeoJSON($mapData);
    $fetcher->saveGeoJSON('zoddak-all-polygons.json', $geojson);
}

// –û—Ç—Ä–∏–º—É—î–º–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
$properties = $fetcher->fetchProperties(['limit' => 1000]);
if ($properties) {
    $geojson = $fetcher->convertToGeoJSON($properties);
    $fetcher->saveGeoJSON('zoddak-from-properties.json', $geojson);
}

echo "\n‚úÖ –ì–û–¢–û–í–û!\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";

