<?php
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è GeoJSON –ø–æ–ª—ñ–≥–æ–Ω—ñ–≤ —Ä–∞–π–æ–Ω—ñ–≤ Costa del Sol –∑ OpenStreetMap
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Overpass API –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–∂ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –æ–¥–∏–Ω–∏—Ü—å
 */

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–π–æ–Ω—ñ–≤ –∑ map.php
$areasData = [
    'Estepona' => ['Benavista', 'Costalita', 'Valle Romano', 'El Padron', 'Hacienda del Sol', 'Selwo', 'Atalaya', 'Benamara', 'El Presidente', 'Bel Air', 'Cancelada', 'New Golden Mile', 'Diana Park'],
    'Malaga' => ['Alhaur√≠n de la Torre', 'Lauro Golf', 'M√°laga', 'M√°laga Este', 'M√°laga Centro', 'Torremar', 'Playamar', 'Almog√≠a', 'Miraflores'],
    'Marbella' => ['R√≠o Real', 'Las Chapas', 'Santa Clara', 'Hacienda Las Chapas', 'Los Monteros', 'Carib Playa', 'Costabella', 'Torre Real', 'Altos de los Monteros', 'Sierra Blanca', 'Nag√ºeles', 'Nueva Andaluc√≠a', 'Elviria', 'Aloha', 'Puerto de Cabopino', 'The Golden Mile', 'Puerto Ban√∫s', 'Artola', 'Los Almendros', 'Bah√≠a de Marbella', 'Marbesa', 'Cabopino', 'Reserva de Marbella', 'Guadalmina Alta', 'Las Brisas', 'El Rosario', 'San Pedro de Alc√°ntara', 'Cortijo Blanco', 'Linda Vista', 'Nueva Alc√°ntara'],
    'Fuengirola' => ['Carvajal', 'Los Boliches', 'Los Pacos', 'Torreblanca', 'Las Lagunas'],
    'Manilva' => ['Punta Chullera', 'La Duquesa', 'San Luis de Sabinillas'],
    'Casares' => ['Casares Playa', 'Casares Pueblo', 'Do√±a Julia'],
    'Mijas' => ['Campo Mijas', 'La Cala de Mijas', 'Valtocado', 'Riviera del Sol', 'Sierrezuela', 'Calanova Golf', 'Mijas Costa', 'La Cala Golf', 'La Cala Hills', 'Calypso', 'Mijas Golf', 'Cerros del Aguila', 'La Cala'],
    'Benahavis' => ['La Heredia', 'Los Arqueros', 'La Zagaleta', 'El Madro√±al', 'Los Flamingos', 'Monte Halcones'],
    'Benalm√°dena' => ['Benalmadena Pueblo', 'La Capellania', 'Arroyo de la Miel', 'Torremuelle', 'Benalmadena Costa', 'Torrequebrada'],
    'Torremolinos' => ['La Carihuela', 'El Pinillo', 'Playamar', 'Bajondillo', 'Montemar', 'Los Alamos'],
];

class OverpassGeocoder {
    private $overpassUrl = 'https://overpass-api.de/api/interpreter';
    private $outputDir;
    
    public function __construct($outputDir) {
        $this->outputDir = $outputDir;
        if (!is_dir($outputDir)) {
            mkdir($outputDir, 0755, true);
        }
    }
    
    /**
     * –í–∏–∫–æ–Ω–∞—Ç–∏ Overpass –∑–∞–ø–∏—Ç
     */
    private function queryOverpass($query) {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->overpassUrl);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, 'data=' . urlencode($query));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_TIMEOUT, 60);
        curl_setopt($ch, CURLOPT_USERAGENT, 'ProPartSpain/1.0');
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        if ($httpCode === 200 && $response) {
            return json_decode($response, true);
        }
        
        return null;
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ª—ñ–≥–æ–Ω –º—ñ—Å—Ç–∞
     */
    public function getCityPolygon($cityName) {
        echo "üîç –®—É–∫–∞—é –ø–æ–ª—ñ–≥–æ–Ω –¥–ª—è –º—ñ—Å—Ç–∞: {$cityName}...\n";
        
        // Overpass –∑–∞–ø–∏—Ç –¥–ª—è –º—ñ—Å—Ç–∞ –≤ –ø—Ä–æ–≤—ñ–Ω—Ü—ñ—ó M√°laga
        $query = <<<OVERPASS
[out:json][timeout:60];
(
  // –ü–æ—à—É–∫ –º—ñ—Å—Ç–∞ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –æ–¥–∏–Ω–∏—Ü—ñ
  area["name"="M√°laga"]["admin_level"="6"]->.provincia;
  (
    relation["name"="{$cityName}"]["boundary"="administrative"](area.provincia);
    relation["name:en"="{$cityName}"]["boundary"="administrative"](area.provincia);
  );
);
out geom;
OVERPASS;
        
        $data = $this->queryOverpass($query);
        
        if ($data && isset($data['elements']) && count($data['elements']) > 0) {
            $element = $data['elements'][0];
            $geojson = $this->convertToGeoJSON($element, $cityName, 'city');
            echo "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—ñ–≥–æ–Ω –¥–ª—è {$cityName}\n";
            return $geojson;
        }
        
        echo "‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—ñ–≥–æ–Ω –¥–ª—è {$cityName}, —Å–ø—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø–æ—à—É–∫...\n";
        return $this->getCityPolygonAlternative($cityName);
    }
    
    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø–æ—à—É–∫ –º—ñ—Å—Ç–∞ —á–µ—Ä–µ–∑ –Ω–∞–∑–≤—É –º—ñ—Å—Ü—è
     */
    private function getCityPolygonAlternative($cityName) {
        $query = <<<OVERPASS
[out:json][timeout:60];
(
  relation["name"="{$cityName}"]["type"="boundary"](36.0,-5.5,37.0,-4.0);
  relation["name:en"="{$cityName}"]["type"="boundary"](36.0,-5.5,37.0,-4.0);
);
out geom;
OVERPASS;
        
        $data = $this->queryOverpass($query);
        
        if ($data && isset($data['elements']) && count($data['elements']) > 0) {
            $element = $data['elements'][0];
            echo "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø–æ–ª—ñ–≥–æ–Ω –¥–ª—è {$cityName}\n";
            return $this->convertToGeoJSON($element, $cityName, 'city');
        }
        
        echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–ª—ñ–≥–æ–Ω –¥–ª—è {$cityName}\n";
        return null;
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ª—ñ–≥–æ–Ω —Ä–∞–π–æ–Ω—É
     */
    public function getNeighborhoodPolygon($neighborhoodName, $cityName) {
        echo "   üîç –®—É–∫–∞—é –ø–æ–ª—ñ–≥–æ–Ω –¥–ª—è —Ä–∞–π–æ–Ω—É: {$neighborhoodName} ({$cityName})...\n";
        
        $query = <<<OVERPASS
[out:json][timeout:60];
(
  // –ü–æ—à—É–∫ —Ä–∞–π–æ–Ω—É –∑–∞ –Ω–∞–∑–≤–æ—é –ø–æ–±–ª–∏–∑—É –º—ñ—Å—Ç–∞
  (
    way["name"="{$neighborhoodName}"]["place"~"suburb|neighbourhood"](36.0,-5.5,37.0,-4.0);
    relation["name"="{$neighborhoodName}"]["place"~"suburb|neighbourhood"](36.0,-5.5,37.0,-4.0);
    relation["name"="{$neighborhoodName}"]["boundary"="administrative"]["admin_level"~"9|10"](36.0,-5.5,37.0,-4.0);
  );
);
out geom;
OVERPASS;
        
        $data = $this->queryOverpass($query);
        
        if ($data && isset($data['elements']) && count($data['elements']) > 0) {
            $element = $data['elements'][0];
            echo "   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—ñ–≥–æ–Ω –¥–ª—è {$neighborhoodName}\n";
            return $this->convertToGeoJSON($element, $neighborhoodName, 'neighborhood', $cityName);
        }
        
        echo "   ‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—ñ–≥–æ–Ω –¥–ª—è {$neighborhoodName}\n";
        return null;
    }
    
    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ OSM element –≤ GeoJSON Feature
     */
    private function convertToGeoJSON($element, $name, $type, $parentCity = null) {
        $coordinates = [];
        
        if (isset($element['members'])) {
            // –¶–µ relation –∑ members
            foreach ($element['members'] as $member) {
                if ($member['role'] === 'outer' && isset($member['geometry'])) {
                    $ring = [];
                    foreach ($member['geometry'] as $point) {
                        $ring[] = [$point['lon'], $point['lat']];
                    }
                    if (count($ring) > 0) {
                        // –ó–∞–º–∫–Ω—É—Ç–∏ –ø–æ–ª—ñ–≥–æ–Ω
                        if ($ring[0] !== $ring[count($ring) - 1]) {
                            $ring[] = $ring[0];
                        }
                        $coordinates[] = $ring;
                    }
                }
            }
        } elseif (isset($element['geometry'])) {
            // –¶–µ way –∑ geometry
            $ring = [];
            foreach ($element['geometry'] as $point) {
                $ring[] = [$point['lon'], $point['lat']];
            }
            if (count($ring) > 0) {
                if ($ring[0] !== $ring[count($ring) - 1]) {
                    $ring[] = $ring[0];
                }
                $coordinates[] = $ring;
            }
        }
        
        if (empty($coordinates)) {
            return null;
        }
        
        return [
            'type' => 'Feature',
            'properties' => [
                'name' => $name,
                'type' => $type,
                'parent' => $parentCity,
                'osm_id' => $element['id'] ?? null,
            ],
            'geometry' => [
                'type' => count($coordinates) > 1 ? 'MultiPolygon' : 'Polygon',
                'coordinates' => count($coordinates) > 1 ? [$coordinates] : $coordinates,
            ]
        ];
    }
    
    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ GeoJSON –¥–ª—è Costa del Sol (–∑–∞–≥–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å)
     */
    public function createCostaDelSolPolygon($cityPolygons) {
        echo "\nüî® –°—Ç–≤–æ—Ä—é—é –∑–∞–≥–∞–ª—å–Ω–∏–π –ø–æ–ª—ñ–≥–æ–Ω Costa del Sol...\n";
        
        // –û–±'—î–¥–Ω–∞—Ç–∏ –≤—Å—ñ –º—ñ—Å—å–∫—ñ –ø–æ–ª—ñ–≥–æ–Ω–∏ –≤ –æ–¥–∏–Ω MultiPolygon
        $allCoordinates = [];
        foreach ($cityPolygons as $feature) {
            if ($feature && isset($feature['geometry']['coordinates'])) {
                if ($feature['geometry']['type'] === 'Polygon') {
                    $allCoordinates[] = $feature['geometry']['coordinates'];
                } elseif ($feature['geometry']['type'] === 'MultiPolygon') {
                    foreach ($feature['geometry']['coordinates'] as $polygon) {
                        $allCoordinates[] = $polygon;
                    }
                }
            }
        }
        
        if (empty($allCoordinates)) {
            echo "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø–æ–ª—ñ–≥–æ–Ω\n";
            return null;
        }
        
        return [
            'type' => 'Feature',
            'properties' => [
                'name' => 'Costa del Sol',
                'name_ua' => '–ö–æ—Å—Ç–∞ –¥–µ–ª—å –°–æ–ª—å',
                'type' => 'region',
                'level' => 1,
            ],
            'geometry' => [
                'type' => 'MultiPolygon',
                'coordinates' => [$allCoordinates],
            ]
        ];
    }
    
    /**
     * –ó–±–µ—Ä–µ–≥—Ç–∏ GeoJSON —É —Ñ–∞–π–ª
     */
    public function saveGeoJSON($filename, $features) {
        $geojson = [
            'type' => 'FeatureCollection',
            'features' => $features,
        ];
        
        $filepath = $this->outputDir . '/' . $filename;
        file_put_contents($filepath, json_encode($geojson, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        echo "üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: {$filepath}\n";
    }
}

// ========== –ì–û–õ–û–í–ù–ê –õ–û–ì–Ü–ö–ê ==========

echo "üöÄ –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è GeoJSON –ø–æ–ª—ñ–≥–æ–Ω—ñ–≤ –¥–ª—è Costa del Sol\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

$outputDir = __DIR__ . '/../data/geojson';
$geocoder = new OverpassGeocoder($outputDir);

$level2Cities = []; // –†—ñ–≤–µ–Ω—å 2: –º—ñ—Å—Ç–∞
$level3Neighborhoods = []; // –†—ñ–≤–µ–Ω—å 3: —Ä–∞–π–æ–Ω–∏

// –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (—â–æ–± –Ω–µ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ Overpass API)
$requestDelay = 2; // —Å–µ–∫—É–Ω–¥–∏

// –û–±—Ä–æ–±–∏—Ç–∏ –∫–æ–∂–Ω–µ –º—ñ—Å—Ç–æ
foreach ($areasData as $city => $neighborhoods) {
    echo "\nüìç –û–±—Ä–æ–±–∫–∞ –º—ñ—Å—Ç–∞: {$city}\n";
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";
    
    // –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ª—ñ–≥–æ–Ω –º—ñ—Å—Ç–∞ (–†—ñ–≤–µ–Ω—å 2)
    $cityPolygon = $geocoder->getCityPolygon($city);
    if ($cityPolygon) {
        $cityPolygon['properties']['level'] = 2;
        $level2Cities[] = $cityPolygon;
    }
    
    sleep($requestDelay);
    
    // –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ª—ñ–≥–æ–Ω–∏ —Ä–∞–π–æ–Ω—ñ–≤ (–†—ñ–≤–µ–Ω—å 3)
    foreach ($neighborhoods as $neighborhood) {
        $neighborhoodPolygon = $geocoder->getNeighborhoodPolygon($neighborhood, $city);
        if ($neighborhoodPolygon) {
            $neighborhoodPolygon['properties']['level'] = 3;
            $level3Neighborhoods[] = $neighborhoodPolygon;
        }
        
        sleep($requestDelay);
    }
}

echo "\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò:\n";
echo "   ‚Ä¢ –ú—ñ—Å—Ç (—Ä—ñ–≤–µ–Ω—å 2): " . count($level2Cities) . "\n";
echo "   ‚Ä¢ –†–∞–π–æ–Ω—ñ–≤ (—Ä—ñ–≤–µ–Ω—å 3): " . count($level3Neighborhoods) . "\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

// –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø–æ–ª—ñ–≥–æ–Ω Costa del Sol (–†—ñ–≤–µ–Ω—å 1)
$costaDelSolPolygon = $geocoder->createCostaDelSolPolygon($level2Cities);
$level1Region = $costaDelSolPolygon ? [$costaDelSolPolygon] : [];

// –ó–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ —Ñ–∞–π–ª–∏
echo "üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è GeoJSON —Ñ–∞–π–ª—ñ–≤...\n";
$geocoder->saveGeoJSON('level-1-region.geojson', $level1Region);
$geocoder->saveGeoJSON('level-2-cities.geojson', $level2Cities);
$geocoder->saveGeoJSON('level-3-neighborhoods.geojson', $level3Neighborhoods);

// –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—Å–µ —Ä–∞–∑–æ–º
$allFeatures = array_merge($level1Region, $level2Cities, $level3Neighborhoods);
$geocoder->saveGeoJSON('costa-del-sol-complete.geojson', $allFeatures);

echo "\n‚úÖ –ì–û–¢–û–í–û! –£—Å—ñ —Ñ–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {$outputDir}\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";

